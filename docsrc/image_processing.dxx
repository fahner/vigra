/** \page ImageProcessingTutorial Image Processing
    
    In this chapter we'll use VIGRA's methods for some applications of Image Processing.

    <h2> Inverting </h2>
    Inverting an (gray scale) image is quite easy. We just need to subtract every pixel's 
    value from white (255). 
    The namespace \ref MultiMathModule provides element-wise operations on a MultiArray.
    To avoid confusion you always have to use the using namespace command before working with
    \ref MultiMathModule. By a given imageArray inverting works as follows:

    \code
    using namespace vigra::multi_math;
    imageArray = 255-imageArray;
    \endcode

    See here a whole example:
    <a href="invert_tutorial_8cxx-example.html">invert_tutorial.cxx</a>

    This is the result:
    <Table cellspacing = "10">
    <TR valign = "bottom">
    <TD> \image html lenna_small.gif "input file" </TD>
    <TD> \image html lenna_inverted.gif "inverted output file" </TD>
    </TR>
    </Table>

    <hr>

    <h2> Dissolving </h2>
    In this example, we have two input images and want to dissolve them. In the dissolved 
    output image every pixel value is the mean of the two appropriate original pixels.

    \code
    using namespace vigra::multi_math;
    exportArray = 0.5*imageArray1 + 0.5*imageArray2;
    \endcode

    Since it is not guaranteed that the two input images have the same size, we first
    determine the maximum possible size of the dissolved image. With the help of subarray-
    method we just dissolve the appropriate parts of the two images. These parts (subimages)
    are aligned in the center of the original images.

    Here's the code:
    <a href="dissolve_8cxx-example.html">dissolve.cxx</a>

    And here are the results:
    <Table cellspacing = "10">
    <TR valign = "bottom">
    <TD> \image html lenna_color_small.gif "input file 1" </TD>
    <TD> \image html oi_small.jpg "input file 2" </TD>
    <TD> \image html dissolved_color.gif "dissolved output file" </TD>
    <TR>
    </Table>

    <hr>

    <h2> Composite </h2>
    Let's come to a little gimmick. Given one input image we want to create a composite image 
    of 4 images reflected to each other. The result looks as if someone had put a mirror on the
    right and lower edge of the input image. Two of Vigra's methods are enough for this
    purpose: subarray and reflectImage (already mentioned in \ref ImportantMethods).
    reflectImage needs some iterators, accessors and a reflection axis. The axis can either
    be horizontal, vertical or both. Use reflectImage with srcImageRange and destImage.

    \code
    vigra::reflectImage(srcImageRange(imageArray), destImage(exportArray), vigra::horizontal | vigra::vertical);
    \endcode

    Here's the code:
    <a href="dissolve_8cxx-example.html">composite.cxx</a>

    And here are the results:
    <Table cellspacing = "10">
    <TR valign = "bottom">
    <TD> \image html lenna_color_small.gif "input file" </TD>
    <TD> \image html lenna_composite_color.gif "composite output file" </TD>
    </TR>
    </Table>

    <hr>

    <h2> Smoothing </h2>
    There are a lot of different ways to smooth an image. Before we use VIGRA's methods, we 
    want to write a smoothing code by our own. The idea is to choose a pixel and give it the
    mean of the surrounding pixels in 3x3-box around the pixel as the new value.
    MultiArray provides two useful methods: sum and size. If we want to calculate the mean of
    an array we need the sum of all elements and divide it by the number of elements (size).
    In our code we iterate over every pixel, look on the 3x3-box surrounding via subarray,
    calculate the sum of this subarray and divide it by its size. This is the new value of
    the pixel.

    On the edges of the image we can't build a box around the pixel. We can only average the
    remaining neighbours of the pixel.

    See the code:
    <a href="smooth_explicitly_8cxx-example.html">smooth_explicitly.cxx</a>

    The results:
    <Table cellspacing = "10">
    <TR valign = "bottom">
    <TD> \image html lenna_small.gif "input file" </TD>
    <TD> \image html lenna_smoothed.gif "smoothed output file" </TD>
    </TR>
    </Table>

    A more comfortable way of such convolving operations is provided by the method 
    <dfn>convolveImage</dfn>. You may use it as follows:

    \code
    vigra::convolveImage(srcImageRange(imageArray), destImage(exportArray), kernel2d(kernel));
    \endcode

    It needs a convolution kernel, which is given as argument object by <dfn>kernel2d()</dfn>.
    For the kernel itself there are different possibilities. You may want to have an
    averaging kernel or weight some elements more than others or maybe you want the kernel
    to be a Gaussian curve... We now want to discuss these three possibilities among others.
    
    <h3> Simple averaging </h3>
    Concerning our smoothing example above, this equivalent way for averaging a 3x3-box is:

    \code
    vigra::Kernel2D<float> kernel; 
    kernel.initExplicitly(Diff2D(-1,-1), Diff2D(1,1)) = 1.0/9.0;
    convolveImage(srcImageRange(imageArray), destImage(exportArray), kernel2d(kernel));
    \endcode

    Pointing to the center (0,0) of the kernel our 3x3-box starts at the coordinates (-1,-1) 
    and has its lower-right corner at (1,1). Since we want to average homogeneously every pixel
    in the kernel is weighted with 1/9 (the kernel has 9 elements).

    <h3> Weighting manually </h3>
    If we want to have a certain weighting, we can do this by hand. In the following example
    we just want to average the corners of the 3x3-box.
    
    \code
    vigra::Kernel2D<float> kernel; 
    kernel.initExplicitly(Diff2D(-1,-1), Diff2D(1,1)) = 
                        0.25, 0.0, 0.25, 
                        0.0,  0.0, 0.0,
                        0.25, 0.0, 0.25;
    convolveImage(srcImageRange(imageArray), destImage(exportArray), kernel2d(kernel));
    \endcode

    You can type in a comma separated list with the weights of each element. Consider that the
    sum of all weights has to be 1.

    <h3> Gaussian convolution </h3>
    The kernel-class has a special <dfn>initGaussian(std_dev)</dfn>-method, that creates the
    appropriate element weightings for any arbitrary standard deviation std_dev:

    \code
    vigra::Kernel2D<float> kernel; 
    kernel.initGaussian(1.5);
    convolveImage(srcImageRange(imageArray), destImage(exportArray), kernel2d(kernel));
    \endcode

    <h3> Separable convolution </h3>
    Actually, convolveImage isn't exactly the same method as our explicit implementation of
    3x3-averaging. It rather uses the methods <dfn> separableConvolveX </dfn> and 
    <dfn> separableConvolveY </dfn>. These methods convolve the x- respectively the y-
    dimension. The advantage is that we need less operations. Instead of averaging 9 pixels
    with weight 1/9 (in total 9 additions), we average every line (3 pixels with weight 1/3 
    ==> 3 additions) and afterwards every column (3 pixels with weight 1/3 ==> 3 additions 
    as well). So in total we need 6 additions instead of 9. With bigger sizes and more 
    dimensions there's a huge difference so it's better to convolve every dimension separately.
    But why do I get the same result? Given a 3x3-matrix

    \f[ \left( \begin{array}{ccc} x_{11} & x_{12} & x_{13} \\ x_{21} & x_{22} & x_{23} 
    \\ x_{31} & x_{32} & x_{33} \end{array} \right) \f]

    We now calculate the averaged value \f$ \widehat{x_{22}}\f$ separated for x and y dimension:

    \f[ \sum_{i=1}^3 \frac{1}{3}\widetilde{x_{i2}} = \sum_{i=1}^3 \frac{1}{3} \sum_{j=1}^3 
    \frac{1}{3}x_{ij} = \sum_{i,j=1}^3 \frac{1}{9}x_{ij} \f]

    which is exactly the 3x3-box average.

    Except that we need a 1D kernel, the use of separableConvolveX resp. separableConvolveY
    is similar to convolveImage.

    \code
    vigra::Kernel1D<double> kernel; 
    kernel.initExplicitly(-1,1) = 1.0/3.0;
    separateConvolveX(srcImageRange(imageArray), destImage(imageArray), kernel1d(kernel));
    separateConvolveY(srcImageRange(imageArray), destImage(exportArray), kernel1d(kernel));
    \endcode

    We give you now an example, where you can choose one of the three methods to smooth an 
    image:
    <a href="smooth_convolve_8cxx-example.html">smooth_convolve.cxx</a>

    <B> Remark: </B> When using RGBValue for color images you have to use double-type in your
    kernel because some operators are not overloaded for float-type (cf. example).

    The results:
    <Table cellspacing = "10">
    <TR valign = "bottom">
    <TD> \image html testimage.gif "input file" </TD>
    <TD> \image html conv1.gif "simple averaging" </TD>
    <TD> \image html conv4.gif "separate convolution" </TD>
    <TD> \image html conv2.gif "weighting manually (corners)" </TD>
    <TD> \image html conv3.gif "Gaussian (std_dev=1.5)" </TD>
    </TR>
    </Table>

    <h3> Convenience methods </h3>
    VIGRA already provides some convenient methods and filters for convolution e.g. 
    <dfn>gaussianSmoothing()</dfn>. For more information see \ref CommonConvolutionFilters and
    \ref Convolution .

    <h3> Convolution of N dimensional arrays </h3>
    VIGRA provides a wide range of convolution filters for N dimensional arrays as well 
    (vigra::MultiArrayView, vigra::MultiArray, etc.). The convolution can be done with a single
    1D kernel used for every dimension or with a vector of 1D kernels each for a single 
    dimension. See also \ref MultiArrayConvolutionFilters.

    <B> Remark: </B>
    The convolution of N dimensional arrays has a little different interface. Instead of using
    <dfn>srcImageRange()</dfn> and <dfn>destImage()</dfn> you have to call the filters with
    <dfn> srcMultiArrayRange() </dfn> and <dfn> destMultiArray() </dfn>. See the following 
    example for Gaussian smoothing of a MultiArray.

    \code
    vigra::MultiArray<3, unsigned char>::size_type shape(width, height, depth);
    vigra::MultiArray<3, unsigned char> imageArray(shape);
    vigra::MultiArray<3, float> exportArray(shape);

    // perform isotropic Gaussian smoothing at scale 'sigma'
    gaussianSmoothMultiArray(srcMultiArrayRange(imageArray), destMultiArray(exportArray), sigma);
    \endcode
    
*/

/** \example invert_tutorial.cxx
    Invert an image file (gray scale or color)
    <br>
    Usage: <TT>invert infile outfile</TT>
*/

/** \example dissolve.cxx
    Dissolve two image files (gray scale or color)
    <br>
    Usage: <TT>dissolve infile1 infile2 outfile</TT>
*/

/** \example composite.cxx
    Create a composite image (gray scale or color)
    <br>
    Usage: <TT>composite infile outfile</TT>
*/

/** \example smooth_explicitly.cxx
    Smooth an image by averaging a 3x3-box (gray scale or color)
    <br>
    Usage: <TT>smooth_ex infile outfile</TT>
*/

/** \example smooth_convolve.cxx
    Convolve an image on different ways (gray scale or color)
    <br>
    Usage: <TT>smooth_con infile outfile</TT>
*/
