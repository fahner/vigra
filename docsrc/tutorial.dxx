/** \page Tutorial Tutorial
    
    This tutorial will help you to get to know the most important methods of VIGRA and 
	shows you how to use them by giving some simple examples. The tutorial consists of
	the following parts:
    
    <ul>
    
    <li> \ref Basics
    
    <li> \ref Indexing
		<BR>&nbsp;&nbsp;&nbsp;<em>how to access an element of MultiArray</em>

    <li> \ref ImageInputOutput
    
    <li> \ref ImportantMethods
		<BR>&nbsp;&nbsp;&nbsp;<em>the methods bind and subarray</em>

    <li> \ref MultiMathModule
    </ul>
*/

/** \page Basics Basic ideas
    <p>The aim of this tutorial is to show you some easy examples of Image Processing using 
    arrays, particularly VIGRA's MultiArray. An image can be interpreted as a matrix or
    2-dimensional arrays, where each element contains the information of a specific pixel.
    In fact, matrices or 2-dimensional arrays are implemented as 1-dimensional array, but for 
    us it seems more natural to describe an image by 2 coordinates (ergo dimensions).
    Each pixel of an image with 800x600 pixels can be identified by a pair (y,x) with 
    y = 0,...,799 and x = 0,...,599.</p>
    <p> In VIGRA, we call the structure of the matrix or multidimensional array 
    <dfn>shape</dfn>. The image described above has the shape (800,600). A 3x3-matrix has the 
    shape (3,3).
    Shapes like (n,m, ...) define the possible values of the coordinates for each 
    dimension: <br/>
    possible coordinates in dimension 0: 0, 1, ..., n-1 <br/>
    possible coordinates in dimension 1: 0, 1, ..., m-1 <br/>
    ... </p>
    <p> To represent the data of a gray scale image, we just need to store one value, so we 
    choose a 2-dimensional array, where each element has the <dfn> unsigned char </dfn> type. 
    With VIGRA we instantiate an gray scale image object like this:</p>
    
    \code
        #include <vigra/multi_array.hxx>
        vigra::MultiArray<2, unsigned char> imageArray;
    \endcode

    <p> Considering RGB-images it is obvious that we can't use the unsigned char type to store
    color images because every pixel contains 3 informations: values for red, green and blue.
    Mathematically you intend to store the data in a vector. For this special purpose, VIGRA
    provides the <dfn>vigra::RGBValue<ValueType></dfn> class. So for RGB-images just use: </p>

    \code
        vigra::MultiArray<2, vigra::RGBValue<unsigned char> > RGBImageArray;
    \endcode

    In fact, vigra::RGBValue<ValueType> is a special kind of a 3-dimensional vector
    containing ValueType elements. The vector data type in VIGRA is implemented in the
    <dfn> TinyVector<T, SIZE> </dfn> class.

    Alternatively you can use a 3-dimensional array <dfn>vigra::MultiArray<2, unsigned
    char></dfn> to represent a color image. The third dimension has size 3 and contains the
    information for red, green and blue channel. We won't use the 3-dimensional array for
    color images because dfn>vigra::RGBValue<ValueType></dfn> provides a lot of helpful
    methods.

    Maybe you've recognized in the last paragraph that there is no need to restrict oneself
    to 2-dimensional arrays. With VIGRA an <B>arbitrary number of dimensions</B> is possible
    for instance:

    \code
        vigra::MultiArray<7, float> otherArray;
    \endcode
*/

/** \page Indexing Indexing

    <h2> Access via coordinates </h2>

    Regarding matrices it is common to index the elements with a tuple of coordinates.
    Using a 3x2 matrix from the section above we can access for instance the element of 
    <dfn> matrix </dfn> in the second column and third row by using the MultiArrayShape::type, 
    which is a kind of a TinyVector. For this example we use the type Shape2(x,y), the 
    specific type definition for 2-dimensional arrays.

    \code
        #include <vigra/multi_array.hxx>
        #include <iostream>
        
        using namespace vigra;
        
        int main (int argc, char ** argv) {
        
            // declare 2-dimensional MultiArray with 3 integer elements in first dimension  
            // and 2 integer elements in second dimension
            vigra::MultiArray<2, int> matrix(Shape2(2,3));
        
            // set all elements on 3
            matrix.init(3);
        
            // print element in second column and third row
            std::cout << matrix[Shape2(1,2)] << std::endl;      // output: 3

            return 0;
        }
    \endcode

    An convenient and equivalent way is just to use the coordinates with round brackets (y,x):

    \code
        // access via simple coordinates, set element in second column and third row
        matrix1(1,2) = 22;
    \endcode
	
    This kind of indexing is only possible if the array's dimension is well known. For generic
    methods you have to use indexing via Shape-object.
	In combination with the method size(n), that gives us the size of the n-th dimension, 
    we can use the coordinates to set the element of an entire row or column:

    \code
        // set all elements of second row to 13
        for (int i = 0; i < matrix.size(1); i++) {
            matrix(1,i) = 13;
        }
    \endcode

    Every call with round brackets creates a new Shape-Object, which is quite inefficient.
    It is better to iterate over a Shape-Object. In the following example, we want to set the
    3rd column of a 8x4-matrix (initialized with 5) to 7.

    \code
        // iterating over a Shape-Object
        vigra::MultiArray<2, int> matrix84(Shape2(4,8));
        matrix84.init(5);
        // instantiate Shape-Object
        Shape2 p;
        // iterate over 3rd column :
        // set first dimension on 2 (equals 3rd column)
        // then iterate over second dimension (equals rows)
        p[0] = 2;                                  
        for(p[1]=0; p[1]<matrix84.size(1); p[1]++) {   
            matrix84[p] = 7;
        }
    \endcode

    Later in this tutorial, we will discuss special methods to set certain parts of the array.

    <hr>

    <h2> Onedimensional []-Operator and StridedScanOrderIterator </h2>
	
    \code
        #include <vigra/multi_array.hxx>
        #include <iostream>
        
        using namespace vigra;
        
        int main (int argc, char ** argv) {
        
            // declare 2-dimensional MultiArray with 3 integer elements in first dimension  
            // and 2 integer elements in second dimension
            vigra::MultiArray<2, int> intArray(Shape2(3,2));
        
            // set all elements on 3
            intArray.init(3);
        
            // print the first element on console
            std::cout << intArray[0] << std::endl;
        
            return 0;
        }
    \endcode
	
	The access via <dfn> intArray[0] </dfn> refers to the the index of the scan order.
	Scan order means, that you iterate the dimensions from front to back. The <dfn> 
    vigra::MultiArray </dfn> - class provides methods to determine the scan order index of 
    given coordinates and vice versa. The <dfn>StridedScanOrderIterator</dfn> lets you iterate
    over the array elements in scan order. You can easily build instances of this Iterator 
    by calling the <dfn>MultiArrayView::begin()</dfn> and <dfn>MultiArrayView::end()</dfn> 
    methods. To give an example we iterate over all elements and set a new value:

	\code
		// declare iterator
		vigra::MultiArray<2, int>::iterator iter;
		int count = 0;
		// iterate over intArray, set a new value and print the element
		for (iter = intArray.begin(); iter != intArray.end(); iter++) {
			*iter = ++count;
		    std::cout << *iter << " ";
	    }
        std::cout << std::endl;
	\endcode

    This creates the ouptut:

    \verbatim
        1 2 3 4 5 6
    \endverbatim

	Let's do some maths: We use the MultiArray class to represent matrices and want to add
	two 3x3-matrices by adding the elements on the same position. The result will be stored
	in the first matrix. We can implement the addition like this:

	\code
		vigra::MultiArray<2, int> matrix1(Shape2(3,3));
		vigra::MultiArray<2, int> matrix2(Shape2(3,3));
		matrix1.init(1);
		matrix2.init(3);
	
		int elements = matrix1.size();			// number of array elements
		for (int i=0; i < elements; i++) {
			matrix1[i] += matrix2[i];
		}
	\endcode

	Be careful: The StridedScanOrderIterator doesn't check if the matrices' shapes match
    to each other.

	\code
	    vigra::MultiArray<2, int> matrix32(Shape2(2,3));
	    vigra::MultiArray<2, int> matrix23(Shape2(3,2));
	    matrix32.init(1);
        matrix23.init(3);
	
	    int size = matrix32.size();			// number of array elements
	    for (int i=0; i < size; i++) {
		    matrix32[i] += matrix23[i];
        }
	\endcode

	<B> This implementation works but it's probably not what you're mathematically intending
    to do! </B>

    By the way: VIGRA provides the += Operator for this purpose and throws an exception if 
    the matrix-sizes don't match:

    \code
        matrix1 += matrix2;                     // works fine!
        matrix32 += matrix23;                 // error: wrong matrix sizes!
    \endcode

    For further mathematical implementations see \ref MultiMathModule .

    VIGRA's scan order is similar to the NumPy-method <dfn> array.flatten </dfn>. You use it, 
    to copy a multidimensional array into an one-dimensional array. The only
    difference is that NumPy uses "C-order" (that means the outmost dimension first), but
    VIGRA from first to last dimension. A method like flatten can be implemented in VIGRA like
    this:

    \code
        // initialize array for flattening
        // set first row of matrix23 to 1 2 3, second row to 4 5 6
        count = 0;
        for (iter = matrix23.begin(); iter != matrix23.end(); iter++) {
            *iter = count++;
        }

        // flatten an array in scan order
        // create 1D-array of appropriate size
        vigra::MultiArray<1, int> flatArray(Shape1(matrix23.size()));
        // copy 2D-array into 1D-array
        std::copy(matrix23.begin(), matrix23.end(), flatArray.begin());
        
        // print 1D-array on console; 
        for (iter = flatArray.begin(); iter != flatArray.end(); iter++) {
             std::cout << *iter << " ";
        }
        std::cout << std::endl;
    \endcode

    To show the difference between VIGRA and NumPy we'll add the NumPy output if we had
    used the flatten-method to the output of the code above

    \verbatim
    flatarray - index     0       1       2       3       4       5 
    -----------------------------------------------------------------
    VIGRA-output:         0       1       2       3       4       5
    matrix23 - index    [0,0]   [1,0]   [2,0]   [0,1]   [1,1]   [2,1]
    -----------------------------------------------------------------
    NumPy-output:         0       3       1       4       2       5
    matrix23 - index    [0,0]   [0,1]   [1,0]   [1,1]   [2,0]   [2,1]
    \endverbatim

    However, NumPy's flat-method returns an iterator like matrix23.begin() in VIGRA.

    To change the direction of the StridedScanOrderIterator, look at the transpose-function
    in \ref ImportantMethods
*/

/** \page ImageInputOutput Image Input Output 

    In this chapter we'd like to show you how to import and export an image with Vigra. If you
    you want to import an image from disk and enquire about its properties, you must use an 
    object of <dfn> ImageImportInfo </dfn> class. It reads the header of the image file. 
    The constructor expects the filename, the filetype will be determined automatically. The
    following types are recognized:

    <DL>
    <DT>"BMP"<DD> Microsoft Windows bitmap image file.
    <DT>"EXR"<DD> OpenEXR high dynamic range image format.
    (only available if libopenexr is installed)
    <DT>"GIF"<DD> CompuServe graphics interchange format; 8-bit color.
    <DT>"HDR"<DD> Radiance RGBE high dynamic range image format.
    <DT>"JPEG"<DD> Joint Photographic Experts Group JFIF format;
    compressed 24-bit color (only available if libjpeg is installed).
    <DT>"PNG"<DD> Portable Network Graphic
    (only available if libpng is installed).
    <DT>"PBM"<DD> Portable bitmap format (black and white).
    <DT>"PGM"<DD> Portable graymap format (gray scale).
    <DT>"PNM"<DD> Portable anymap.
    <DT>"PPM"<DD> Portable pixmap format (color).
    <DT>"SUN"<DD> SUN Rasterfile.
    <DT>"TIFF"<DD> Tagged Image File Format.
    (only available if libtiff is installed.)
    <DT>"VIFF"<DD> Khoros Visualization image file.
    </DL>

    In the following example, the image is given via console as first argument:

    \include imageImportInfo_tutorial.cxx

    As you can see, the <dfn> ImageImportInfo </dfn> object contains a lot of information,
    some of it is printed in the example. Using this image

    \image html lenna_small.gif "inputfile"

    we get the following output:

    \verbatim
    Image information:
    Filetype: GIF
    Width: 154
    Height: 145
    Color Image: no
    \endverbatim

    To process images, this isn't enough. As described in \ref basics we want to save the
    image data in a multidimensional array. That's why we need <dfn> MultiArray </dfn> 
    object and a method writing the image data into the array. This method is called 
    <dfn> importImage(...) </dfn>. It needs an <dfn> ImageImportInfo </dfn> object and
    an <dfn>ImageIterator</dfn> (+ Accessor). To give the iterator, just use 
    <dfn>destImage(imageArray)</dfn> where imageArray is the MultiArray object to copy the 
    image data in. The code looks like this:

    \dontinclude imageIO_tutorial.cxx
    \skip read image
    \until importImage

    Now, imageArray contains the image data and you can edit it. Writing the image data from
    an Array to a file is quite similar. For this purpose, we use the mehtod 
    <dfn>exportImage(...)</dfn>. It needs two iterators, one pointing at the upper-left point
    of an image, one on the lower-right, an Image Accessor and an 
    <dfn>vigra::ImageExportInfo</dfn>-object. To make it easier, just use the
    <dfn>srcImageRange(imageArray)</dfn> method instead of giving two iterators and an 
    accessor. The ImageExportInfo-object needs a filename. The file-type is guessed from the
    filename's extension. Recognized extensions are: '.bmp', '.exr', '.gif', '.jpeg', '.jpg', 
    '.p7', '.png', '.pbm', '.pgm', '.pnm', '.ppm', '.ras', '.tif', '.tiff', '.xv', '.hdr'. 
    EXR support requires libopenexr, JPEG support requires libjpeg, PNG support requires 
    libpng and TIFF support requires libtiff. In the following example, we create and save a 
    180x180pixels - image, where the whole image is gray. 
    The image is saved as "testimage.gif" in the same folder as the executed code.

    \include imageExportInfo_tutorial.cxx

    The resulting image is the following:

    \image html testimage.gif "testimage.gif"

    Finally we want to give a whole example of importing, editing and exporting an image.
    After importing, we set every second horizontal line to black. This can be easily done
    with the <dfn>bind<M>(i)></dfn>-method thoroughly explained in \ref ImportantMethods .
    The inputfile and the outputfile are given as arguments via console.

    \include imageIO_tutorial.cxx

    The inputimage and the resulting outputimage are:

    \image html lenna_small.gif "inputimage"
    \image html lenna_stripes.gif "outputimage"

    <B>Note:</B> The handling of color images is exactly the same, but instead of instantiating
    a <dfn>vigra::MultiArray<2, unsigned char></dfn> you need a
    <dfn> vigra::MultiArray<2, vigra::RGBValue<unsigned char> > </dfn> array as described in
    \ref Basics .

    <h2> For advanced users: </h2> 
    The ImageExportInfo class provides some additional useful 
    methods for instance <dfn> setCompression(...) </dfn>, whereby you can set the image's
    compression type and quality.

    Image Processing often requires more complicated calculations as seen in these examples.
    In this case, it is better to import and convert the data into a <dfn>float</dfn>-array 
    instead of the <dfn>unsigned</dfn> type to avoid huge rounding errors. Conversion is
    automatically done by the importImage method. Of course, there are other possible types,
    but float is highly recommended for Image Processing.

    Exporting a float-Array is handled differently. Some file formats allow float e.g. TIFF,
    so there is no conversion. If not, exportImage automatically converts the data into
    unsigned char. To see which types are allowed by each format look at the documentation of
    \ref ImageExportInfo .



    
*/
